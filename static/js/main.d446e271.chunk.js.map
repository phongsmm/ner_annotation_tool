{"version":3,"sources":["logo.svg","Databoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Databoard","props","handleOpen","setState","portalopen","pick","begin","end","text","handleClose","state","handle","bind","Updatestate","textareahandle","Updatebg","checktext","oldProps","nextProps","nextState","this","prop","posts","event","txt","target","value","data","i","mentions","map","lo","console","log","type","location","start","selection","window","getSelection","range","getRangeAt","startOffset","endOffset","toString","html","cut","lo_begin","lo_end","sort","a","b","m","push","key","className","slice","length","pageNumber","indexOfLastPost","currentpage","postperpage","indexOfFirstPost","currentpost","Math","ceil","id","TransitionablePortal","closeOnTriggerClick","onOpen","onClose","openOnTriggerClick","trigger","Button","onClick","content","negative","positive","Segment","style","left","position","top","zIndex","Header","onMouseUp","Input","placeholder","width","disabled","Pagination","ellipsisItem","activePage","totalPages","onPageChange","Changepage","React","Component","App","datatotal","tags","axios","get","res","list","Person","e","page","href","aria-hidden","Label","color","src","logo","alt","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d446e271.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Pagination ,TransitionablePortal, Button, Segment, Header,Input} from 'semantic-ui-react'\r\n\r\n\r\nclass Databoard extends React.Component {\r\n\r\n    \r\n\r\n        constructor(props) {\r\n            super(props);\r\n            \r\n            this.state = {\r\n                pick:{\r\n                    \"begin\":0,\r\n                    \"end\":0\r\n                },\r\n                portalopen:false,\r\n                text:\"ข้อความ\"\r\n\r\n            }\r\n        \r\n\r\n            this.handle = this.handle.bind(this);\r\n            this.Updatestate = this.Updatestate.bind(this);\r\n            this.textareahandle = this.textareahandle.bind(this);\r\n            this.Updatebg = this.Updatebg.bind(this);\r\n            this.checktext = this.checktext.bind(this);\r\n\r\n         \r\n        }\r\n        \r\n\r\n        \r\n\r\n\r\n\r\n        componentDidMount() {\r\n\r\n\r\n        }\r\n\r\n\r\n        componenWillUnmount() {\r\n\r\n        }\r\n\r\n        componentDidUpdate(oldProps){\r\n\r\n        }\r\n        \r\n        shouldComponentUpdate(nextProps, nextState){\r\n            const { prop } = this.props\r\n            if (prop !== nextProps.posts) {\r\n              return true\r\n            }\r\n            return false\r\n        }\r\n\r\n\r\n        handle(event) {\r\n\r\n            this.props.setState({\r\n                txt: event.target.value\r\n            });\r\n\r\n        }\r\n\r\n        handleOpen = () => this.setState({ portalopen: true ,pick:{begin:0,end:0},text:\"ข้อความ\" })\r\n        handleClose = () => this.setState({ portalopen: false })\r\n\r\n\r\n        Updatestate(data,i){\r\n            data.mentions.map((lo)=> {\r\n                 console.log(`${lo.text}:${lo.type} ( ${lo.location.begin},${lo.location.end})` )\r\n\r\n\r\n                return \"\";\r\n            }   \r\n            );\r\n\r\n        }\r\n\r\n        textareahandle(){\r\n\r\n                var start = 0\r\n                var end = 0\r\n                var selection = window.getSelection()\r\n                var range = selection.getRangeAt(0)\r\n            \r\n            \r\n                console.log(range.startOffset,range.endOffset,selection.toString())\r\n                start = range.startOffset\r\n                end =  range.endOffset\r\n\r\n                this.setState({\"pick\":{begin:start,end:end},text:selection.toString()})\r\n\r\n            \r\n        }\r\n    \r\n\r\n\r\n        checktext(){\r\n            if(this.state.text===\"\"){\r\n                return \"\"\r\n            }\r\n            return this.state.text\r\n        }\r\n\r\n\r\n\r\n         Updatebg(data){\r\n\r\n            var text = data.text;\r\n            var html = [];\r\n            var cut = [];\r\n            var lo_begin = [];\r\n            var lo_end = [];\r\n\r\n                var m = data.mentions.sort((a,b)=>{return a.location.begin - b.location.begin})\r\n                m.map((m,i)=>{\r\n                cut.push(<span key={\"child : \"+i} className={m.type}>{text.slice(m.location.begin,m.location.end)}</span>)\r\n                lo_begin.push(m.location.begin)\r\n                lo_end.push(m.location.end)\r\n                return[]\r\n            })\r\n            \r\n\r\n            for(var i = 0;i<=cut.length;i++){\r\n                if(i===0){\r\n                html.push(<span key={\"normal :\"+i}>{text.slice(0,lo_begin[i])}</span>)\r\n                    html.push(cut[i])\r\n                }\r\n                else{\r\n                    html.push(<span key={\"normal :\"+i}>{text.slice(lo_end[i-1],lo_begin[i])}</span>)\r\n                    html.push(cut[i])\r\n                }\r\n            }\r\n\r\n            return html\r\n\r\n            \r\n\r\n        }\r\n\r\n\r\n\r\n        render() {\r\n\r\n        //Slice Page Number\r\n\r\n            const pageNumber = [],\r\n                indexOfLastPost = this.props.currentpage * this.props.postperpage ,\r\n                indexOfFirstPost = indexOfLastPost - this.props.postperpage,\r\n                currentpost = this.props.posts.slice(indexOfFirstPost,indexOfLastPost);\r\n        \r\n            for(let i =1 ;i<=Math.ceil(this.props.posts.length/this.props.postperpage);i++)\r\n            {pageNumber.push(i);}\r\n\r\n            const { portalopen } = this.state.portalopen\r\n\r\n       \r\n\r\n        // Get Data Total\r\n       \r\n\r\n\r\n                return (  \r\n                <div> \r\n                    { currentpost.map((data ,i) => { \r\n                      return [\r\n                    <div key={\"a\" + data.id} > \r\n                    <div className=\"ui grid\">\r\n                    <div className=\"row\">\r\n                    <div className=\"thirteen wide column\">\r\n\r\n                    <div className=\"ui card\" >\r\n                        <div className=\"content\" >\r\n                            <div className=\"description\"> <p>{this.Updatebg(data)}</p> </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n\r\n                    <div className=\"column\">\r\n\r\n                    <TransitionablePortal\r\n                    closeOnTriggerClick\r\n                    onOpen={this.handleOpen}\r\n                    onClose={this.handleClose}\r\n                    openOnTriggerClick\r\n                    trigger={\r\n                    <Button className=\"ui primary button\"\r\n                    key={\"b\"+data.id}\r\n                    onClick={()=>{this.Updatestate(data,i)}}\r\n                    content={portalopen ? 'EDIT' : 'EDIT'}\r\n                    negative={portalopen}\r\n                    positive={!portalopen}\r\n                    />}>\r\n                        \r\n                    <Segment\r\n                    style={{ left: '40%', position: 'fixed', top: '50%', zIndex: 1000 }}\r\n                    >\r\n                    <Header>ข้อความรหัสที่ {data.id}</Header>\r\n                    <p onMouseUp={this.textareahandle}>{data.text}</p>\r\n                    \r\n                    <button className =\"ui primary button\"> POST</button>\r\n                    <Input placeholder='ข้อความ' value={this.state.text} style={{width:\"45%\", \"marginRight\":\"5px\"}}  />\r\n                    <button className =\"ui  button\" disabled={true} >{this.state.pick.begin}</button>\r\n                    <button className =\"ui  button\" disabled={true} >{this.state.pick.end}</button>\r\n                    </Segment>\r\n                    </TransitionablePortal>\r\n\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n                    ];    \r\n                            })}\r\n\r\n                    <div className=\"mt-30 mb-20\">\r\n                        <Pagination ellipsisItem={null} activePage={this.props.currentpage} totalPages={pageNumber.length} onPageChange={this.props.Changepage}/>\r\n                    </div>\r\n\r\n                   \r\n                    \r\n                </div>\r\n                                    )}}\r\n\r\nexport default Databoard;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport Databoard from'./Databoard';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Label } from 'semantic-ui-react'\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n\r\n    super(props);\r\n    this.state = {\r\n      txt: \"\",\r\n      posts: [],\r\n      currentpage: 1,\r\n      postperpage: 10,\r\n      datatotal:0,\r\n      tags : {\r\n\r\n        \"Person\":0,\r\n        \"Location\":0,\r\n        \"Organization\":0,\r\n        \"JobTitle\":0,\r\n        \"Facility\":0,\r\n        \"GeographicFeature\":0,\r\n        \"Product\":0,\r\n        \"Date\":0,\r\n        \"Time\":0,\r\n        \"Duration\":0,\r\n        \"Measure\":0,\r\n        \"Money\":0,\r\n        \"Ordinal\":0,\r\n        \"Number\":0,\r\n        \"Percent\":0,\r\n        \"Address\":0,\r\n        \"PhoneNumber\":0,\r\n        \"EmailAddress\":0,\r\n        \"URL\":0,\r\n        \"IPAddress\":0,\r\n        \"Hashtag\":0,\r\n        \"TwitterHandle\":0,\r\n\r\n      },\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  };\r\n    this.Changepage = this.Changepage.bind(this);\r\n\r\n    \r\n   \r\n  }\r\n\r\n\r\n\r\n  \r\n    async componentDidMount() {\r\n\r\n   const res = await axios.get('http://localhost:8000/get/');\r\n    this.setState({posts:res.data})\r\n    const list = await axios.get('http://localhost:8000/list/');\r\n    this.setState({tags:{\"Person\":list.data.Person}})\r\n\r\n    \r\n\r\n    \r\n     \r\n}\r\n\r\n\r\ncomponenWillUnmount() {\r\n}\r\n\r\n\r\nChangepage(e,page){\r\n\r\n  this.setState({currentpage:page.activePage});\r\n\r\n}\r\n\r\n\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <div className=\"ui attached tabular menu\"><a href=\"!#\" className=\"active item\">\r\n  <i aria-hidden=\"true\" className=\"users icon\"></i>NER (annotation tool) </a><a href=\"!#\" className=\"item\">Data<div className=\"ui label\">{this.state.posts.length}</div>\r\n          </a>\r\n          <button className=\"ui button\" >Add </button> \r\n          </div>\r\n  <div className=\"ui bottom attached segment active tab color-black\"> <Label color='blue'>Person : {this.state.tags.Person} </Label></div>\r\n          </div>\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n\r\n        <Databoard {...this.state} Changepage = {this.Changepage}/>\r\n\r\n      </header>\r\n    </div>\r\n  )};\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}